# # –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
# # __add__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ +   addition
# # __sub__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ -    subtraction
# # __mul__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ *    multiplication
# # __truediv__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ / true division
# # __floordiv__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ // integer division
# # __mod__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ % modulus (remainder)
# # __pow__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ **  power (exponentiation)


# class Student:
#     def __init__(self, name, score):
#         self.name = name
#         self.score = score
        
#     def __add__(self, other):
#         return self.score + other.score
    
#     def __sub__(self, other):
#         return self.score - other.score
#         # return abs(self.score - other.score) # –ø–æ –º–æ–¥—É–ª—é
        
#     def __mul__(self, other):
#         return self.score * other.score
    
#     def __truediv__(self, other):
#         # return self.score / other.score
#         bigger = max(self.score, other.score)
#         smaller = min(self.score, other.score)
#         if smaller == 0:
#             return ('inf')
#         return bigger / smaller
    
#     def __floordiv__(self, other):
#         return self.score // other.score
    
#     def __mod__(self, other):
#         return self.score % other.score
    
#     def __pow__(self, other):
#         return self.score ** other.score
    
    
# s1 = Student("Alex", 15)
# s2 = Student("Maria", 5)

# print(s1 + s2)  # 40
# print(s1 - s2)  # -10
# print(s1 * s2)  # 375
# print(s2 / s1)  # 3.0
# print(s1 // s2) # 3
# print(s1 % s2) # 0
# print(s1 ** s2) # 759375

# # __radd__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ + (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)
# # __rsub__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)
# # __rmul__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ * (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)`
# # __rtruediv__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ / (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)
# # __rfloordiv__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ // (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)
# # __rmod__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ % (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)
# # __rpow__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ** (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)

# # _iadd__(self, other): in-place addition (—Å–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º, +=)
# # __isub__(self, other): in-place subtraction (–≤—ã—á–∏—Ç–∞–Ω–∏–µ —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º, -=)
# # __imul__(self, other): in-place multiplication (—É–º–Ω–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º, *=)
# # __itruediv__(self, other): in-place true division (–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º, /=)
# # __ifloordiv__(self, other): in-place floor division (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º, //=)
# # __imod__(self, other): in-place modulo (–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º, %=)
# # __ipow__(self, other): in-place exponentiation (–≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º, **=)

# class Student:
#     def __init__(self, name, score):
#         self.name = name
#         self.score = score
        
#     def __iadd__(self, other):
#         self.score += other.score
#         return self.score
# s1 += s2
# print(s1) # 20

# # __eq__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ==
# # __ne__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ !=
# # __lt__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ <
# # __le__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ <=
# # __gt__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ >
# # __ge__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ >=\

# class Student:
#     def __init__(self, name, score):
#         self.name = name
#         self.score = score
        
#     def __lt__(self, other):
#         return self.score < other.score
    
#     def __gt__(self, other):
#         return self.score > other.score
    
#     def  __le__(self, other):
#         return self.score <= other.score

# studen1 = Student("Nina", 15)
# studen2 = Student("Petro", 17)
# print(studen1 > studen2) # True
# print(studen1 <= studen2) # True

# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (–ø–æ–±–∏—Ç–æ–≤—ã–µ)
# __and__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ &
# __or__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ |
# __xor__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ^  - eXclusive OR
# __invert__(self): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ~
# __rand__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ & (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)
# __ror__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ | (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)
# __rxor__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ^ (–ø—Ä–∞–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)
# __iand__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ &=
# __ior__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ |=
# __ixor__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ^=

s = 5 # dec
print(bin(15)) # 0b   101
print(int("1101", 2))  # 5

# & –Ω–∞–ª–∏—á–∏–µ 1 —É –¥–≤—É—Ö —á–∏—Å–µ–ª, –µ—Å–ª–∏ —É –¥–≤–æ—Ö –∫—Å—Ç—å 1 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 –∏–Ω–∞—á–µ 0
# a = 5    # 0101
# b = 8    # 1000
# #          0000 
# print(a & b) # 0


READ = 1      # 001
WRITE = 2     # 010
UPDATE = 4    # 100
DELETE = 8    # 1000
Any = 15      # 1111
#             00001
user_code = 1 # 0101

flags = {"READ": READ, "WRITE": WRITE, "UPDATE": UPDATE, "DELETE": DELETE}
for key, flag in flags.items():
    if user_code & flag:
        print(f"{key} - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
    else:
        print(f"{key} - –∑–∞–ø—Ä–µ—â–µ–Ω–æ")

# n = 16
# print("–ù–µ—á—ë—Ç–Ω–æ–µ" if n & 1 else "–ß—ë—Ç–Ω–æ–µ")

# __or__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ | –µ—Å–ª–∏ –∑–æ—Ç—è–±—ã –æ–¥–∏–Ω = 1 —Ç–æ  1, –µ—Å–ª–∏ –≤—Å–µ –Ω—É–ª–∏ - 0

# a = 5    # 0101
# b = 8    # 1000
# #          1101
# print(a | b) # 13
# user_code = WRITE | DELETE
# print(user_code) # 10

# __xor__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ^  - eXclusive OR –µ—Å–ª–∏ –±–∏—Ç—ã —Ä–∞–∑–Ω—ã–µ —Ç–æ–≥–¥–∞ 1, –µ—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–æ–≥–¥–∞ 0
print(45 ^ 75) # 102
# 0101101
# 1001011
print(int("1100110", 2)) # 102

new_user_code = user_code ^ DELETE

flags = {"READ": READ, "WRITE": WRITE, "UPDATE": UPDATE, "DELETE": DELETE}
for key, flag in flags.items():
    if new_user_code & flag:
        print(f"{key} - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
    else:
        print(f"{key} - –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
        
        
# __invert__(self): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ~ 
print(~10) # -11
print(~-10) # 9

class MyFlags:
    def __init__(self, value):
        self.value = value
        
    def __and__(self, other):
        print("–í—ã–∑—ã–≤–∞–µ—Ç—å—Å—è: AND")
        return self.value & other
    
    def __rand__(self, other):
        print("–í—ã–∑—ã–≤–∞–µ—Ç—å—Å—è: right AND")
        return other & self.value
    
    def __or__(self, other):
        print("–í—ã–∑—ã–≤–∞–µ—Ç—å—Å—è: OR")
        return self.value | other
    
    def __ror__(self, other):
        print("–í—ã–∑—ã–≤–∞–µ—Ç—å—Å—è: right OR")
        return other | self.value
    
    def __xor__(self, other):
        print("–í—ã–∑—ã–≤–∞–µ—Ç—å—Å—è: XOR")
        return self.value ^ other
    
    def __rxor__(self, other):
        print("–í—ã–∑—ã–≤–∞–µ—Ç—å—Å—è: right XOR")
        return other ^ self.value
    
    def __invert__(self):
        return ~self.value
    
flag1 = MyFlags(0b1101)
# flag2 = MyFlags(0b100111)

print(flag1 & 0b100111)
print(0b100111 & flag1)
print(0b100111 | flag1)
print(flag1 ^ 0b100111)
print(0b100111 ^ flag1)
print(~flag1)


# __iand__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ &=
# __ior__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ |=
# __ixor__(self, other): –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ^=
# x = 5
# y = 7
# x &= y
# print(x) # 5

# class Student:
#     def __init__(self, name):
#         self.name = name
        
#     def __complex__(self):
#         return complex(self.name, self.name)
    
# n = Student(3)
# z = complex(n) # 3 +3j
# print(z.real)
# print(z.imag)

# x2 + 1 = 0
# x2 = -1
# x = ^-1 i 
# ùëà(ùë°)=ùëà0*sin(ùúîùë° + ùúë)

# üîπ –°–∏—Ç—É–∞—Ü–∏—è –∏–∑ –∂–∏–∑–Ω–∏: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫ (AC) –≤ —ç–ª–µ–∫—Ç—Ä–∏–∫–µ
# –í —ç–ª–µ–∫—Ç—Ä–∏–∫–µ, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–æ–∫–æ–º, —É –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ü–µ–ø–∏ –µ—Å—Ç—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–∏–º–ø–µ–¥–∞–Ω—Å).
# –†–µ–∑–∏—Å—Ç–æ—Ä –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (—Ç–µ–ø–ª–æ).
# –ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä –∏–ª–∏ –∫–∞—Ç—É—à–∫–∞ –∏–º–µ—é—Ç –º–Ω–∏–º—É—é —á–∞—Å—Ç—å (—Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ).
# –ï—Å–ª–∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å Impedance (—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞), —Ç–æ –º–æ–∂–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å __complex__, —á—Ç–æ–±—ã –Ω–∞—à –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–∞–ª—Å—è –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —Ç–æ–∫–∏ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è.

# class  Impedance:
#     def __init__(self, res=0, kon=0):
#         self.res = res
#         self.kon = kon
    
#     def __complex__(self):
#          return complex(self.res, self.kon)
    
#     def __str__(self):
#         return f"Impedance(R={self.res}, X={self.kon}"
    
# R = Impedance(10, 0)
# L = Impedance(0, 50)
# total = complex(R) + complex(L)

# print("–†–µ–∑–∏—Å—Ç–æ—Ä: ", complex(R))
# print("–ö–∞—Ç—É—à–∫–∞: ", complex(L))
# print("–ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–æ–µ–Ω–∏–µ: ", total)


# –ò–Ω—Ç–µ—Ä–∞—Ç–æ—Ä

# class Counter:
#     def __init__(self, max):
#         self.max = max
#         self.corrent = 0
    
#     def __iter__(self):
#         return self
    
#     def __next__(self):
#         if self.corrent == self.max:
#             raise StopIteration
#         self.corrent += 1
#         return self.corrent
    
# c = Counter(5)
# for n in c:
#     print(n)

# class Welcome:
#     def __init__(self, name):
#         self.name = name
    
#     def __call__(self, greating, znak):
#         return f"{greating}, {self.name}{znak}"
    
# g = Welcome("Alice")
# print(g("Hello", "!"))


# –±–∞–Ω–∫ —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–¥–µ –º–æ–∂–Ω–æ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å, –≤—ã—á–∏—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã, –∏ –¥–∞–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.

class Wallet:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance
    def __str__(self):
        return f"–ö–æ—à–µ–ª—ë–∫ {self.owner} —Å –±–∞–ª–∞–Ω—Å–æ–º {self.balance}"
    
alice = Wallet("Alice", 500)
honza = Wallet("Honza", 750)
print(alice)
print(honza)